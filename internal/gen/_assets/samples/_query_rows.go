// Package sample provides sample model.
package sample

// DO NOT EDIT: Code generated by "qspec samples/sample.yml"

import "database/sql"

const (
	_SelectStmt             = `SELECT * FROM Sample WHERE ID = ?;`
	_SelectByIDAndTitleStmt = `SELECT * FROM Sample WHERE ID = ?;`
)

var (
	// DB defines the database that will be used for this model.
	DB *sql.DB
)

func getDB() *sql.DB {
	if DB == nil {
		panic("DB not set")
	}
	return DB
}

// Blog represents a blog.
type Blog struct {
	ID    string `json:"id,string"`
	Title string
}

// Select select by ID and Title.
func Select(id interface{}) (Blog, error) {
	var v Blog
	err := getDB().QueryRow(_SelectStmt, id).Scan(&v.ID, &v.Title)
	if err != nil {
		return Blog{}, err
	}

	return v, nil
}

// PreparedSelect represents the prepared Select statement.
type PreparedSelect struct {
	stmt *sql.Stmt
}

// PrepareSelect returns the prepared Select statement.
func PrepareSelect() (*PreparedSelect, error) {
	stmt, err := getDB().Prepare(_SelectStmt)
	if err != nil {
		return nil, err
	}

	return &PreparedSelect{stmt}, nil
}

// Close closes the prepared Select statement.
func (p *PreparedSelect) Close() error {
	return p.stmt.Close()
}

// Query executes the prepared Select statement.
func (p *PreparedSelect) Query(id interface{}) (Blog, error) {
	var v Blog
	err := p.stmt.QueryRow(id).Scan(&v.ID, &v.Title)
	if err != nil {
		return Blog{}, err
	}

	return v, nil
}

// SelectByIDAndTitleResult represents the result of SelectByIDAndTitle query.
type SelectByIDAndTitleResult struct {
	ID      string `json:"id,string"`
	Title   string
	Content string
}

// SelectByIDAndTitle select by ID and Title.
func SelectByIDAndTitle(id interface{}) ([]SelectByIDAndTitleResult, error) {
	var a []SelectByIDAndTitleResult
	rows, err := getDB().Query(_SelectByIDAndTitleStmt, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	for rows.Next() {
		var v SelectByIDAndTitleResult
		if err := rows.Scan(&v.ID, &v.Title, &v.Content); err != nil {
			return nil, err
		}
		a = append(a, v)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}

	return a, nil
}

// PreparedSelectByIDAndTitle represents the prepared SelectByIDAndTitle statement.
type PreparedSelectByIDAndTitle struct {
	stmt *sql.Stmt
}

// PrepareSelectByIDAndTitle returns the prepared SelectByIDAndTitle statement.
func PrepareSelectByIDAndTitle() (*PreparedSelectByIDAndTitle, error) {
	stmt, err := getDB().Prepare(_SelectByIDAndTitleStmt)
	if err != nil {
		return nil, err
	}

	return &PreparedSelectByIDAndTitle{stmt}, nil
}

// Close closes the prepared SelectByIDAndTitle statement.
func (p *PreparedSelectByIDAndTitle) Close() error {
	return p.stmt.Close()
}

// Query executes the prepared SelectByIDAndTitle statement.
func (p *PreparedSelectByIDAndTitle) Query(id interface{}) ([]SelectByIDAndTitleResult, error) {
	var a []SelectByIDAndTitleResult
	rows, err := p.stmt.Query(id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	for rows.Next() {
		var v SelectByIDAndTitleResult
		if err := rows.Scan(&v.ID, &v.Title, &v.Content); err != nil {
			return nil, err
		}
		a = append(a, v)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}

	return a, nil
}
