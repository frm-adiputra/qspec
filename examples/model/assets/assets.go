// Code generated by go-bindata.
// sources:
// _assets/tables.sql
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tablesSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x91\xb1\x6e\x83\x30\x10\x86\x77\x3f\xc5\x89\x29\x91\xb2\x84\xb5\x13\xa1\x57\x09\xd5\x36\x95\x39\xaa\x66\xaa\x9a\xd4\x6d\x91\x02\x48\xe0\xa5\x6f\x5f\x1c\x87\x00\x89\x2b\xaa\x86\xf1\xe3\xee\xff\x74\xfe\x63\x85\x11\x21\x50\xb4\xe1\x08\x66\xf7\xba\x3b\xd4\x9f\xb0\x48\xee\x81\xf0\x85\xe0\x49\x25\x22\x52\x5b\x78\xc4\x2d\xc8\x94\x40\xe6\x9c\xaf\x80\x0a\x73\xd0\x6e\x60\x80\x71\x5d\x19\x5d\x99\x29\x5e\xde\x31\xc6\x12\x99\xa1\x22\x48\x24\xa5\xbd\xa1\x13\x9c\x62\xce\x8b\x4b\xf6\x1c\xf1\x1c\xb3\x45\xf0\x51\x34\xad\x09\x56\x0c\xdc\x17\x88\x6f\x78\xb0\x08\x36\xdd\xe6\x6f\x1c\xf6\x2e\x26\xf8\x97\xb2\xd5\xdd\xfa\xfb\x34\x3b\x3b\x32\x8f\x74\xf4\xe3\x36\xab\xf9\x2a\x9a\x0b\x29\x59\xe4\x71\x0e\x7c\xaa\xbc\xac\x6f\x5f\x97\xa5\x6d\x61\xa6\xc1\xbc\xd5\x4d\xf5\x56\x5e\x97\x98\x0a\x81\x92\xe6\x4b\x3c\x79\x8e\xe7\xf5\x61\xe7\xf5\xe1\xc2\xf5\xe8\x8a\x7e\x6c\xcc\x62\x17\xb3\xf6\xbe\xdf\x1f\x1d\xa1\xc7\x11\x5e\x3b\x42\xeb\xf8\x09\x00\x00\xff\xff\x88\x9f\xe8\x0f\xee\x02\x00\x00")

func tablesSqlBytes() ([]byte, error) {
	return bindataRead(
		_tablesSql,
		"tables.sql",
	)
}

func tablesSql() (*asset, error) {
	bytes, err := tablesSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tables.sql", size: 750, mode: os.FileMode(436), modTime: time.Unix(1462707753, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tables.sql": tablesSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"tables.sql": &bintree{tablesSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

